import torch
from langchain_chroma import Chroma
from loguru import logger
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
import json
import os

from app.config import settings


class ChromaVectorStore:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤.
        –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ init().
        """
        self._store: Chroma | None = None
        self.embeddings = None

    async def init(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Chroma.
        –°–æ–∑–¥–∞–µ—Ç embeddings –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—è CUDA –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
        """
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaVectorStore...")
        try:
            device = "cuda" if torch.cuda.is_available() else "cpu"
            logger.info(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {device}")

            self.embeddings = HuggingFaceEmbeddings(
                model_name=settings.LM_MODEL_NAME,
                model_kwargs={"device": device},
                encode_kwargs={"normalize_embeddings": True},
            )

            self._store = Chroma(
                persist_directory=settings.STORAGE_CHROMA_PATH,
                embedding_function=self.embeddings,
                collection_name=settings.STORAGE_COLLECTION_NAME,
            )

            logger.success(
                f"‚úÖ ChromaVectorStore —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "
                f"'{settings.STORAGE_COLLECTION_NAME}' –≤ '{settings.STORAGE_CHROMA_PATH}'"
            )
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromaVectorStore: {e}")
            raise

    async def asimilarity_search(self, query: str, with_score: bool, k: int = 3):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Chroma.

        Args:
            query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            with_score (bool): –í–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –µ—Å–ª–∏ with_score=True

        Raises:
            RuntimeError: –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        """
        if not self._store:
            raise RuntimeError("ChromaVectorStore is not initialized.")
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ¬´{query}¬ª, top_k={k}")
        try:
            if with_score:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                results = await self._store.asimilarity_search_with_score(
                    query=query, k=k
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                results = await self._store.asimilarity_search(query=query, k=k)
            logger.debug(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return results
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            raise

    async def close(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Chroma.
        –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Chroma –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è,
        –Ω–æ –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã API –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ ChromaVectorStore...")
        # –ü–æ–∫–∞ Chroma –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –Ω–æ –≤ –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
        # self._store.close() –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥
        pass

    async def load_documents_to_chroma(self, directory_path: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ ChromaDB.
        """
        if not self.embeddings:
            raise RuntimeError("Embeddings not initialized. Call init() first.")

        logger.info(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
        documents = self._get_documents_from_directory(directory_path)

        if not documents:
            logger.warning("ü§∑ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=settings.CHROMA_CHUNK_SIZE,
            chunk_overlap=settings.CHROMA_CHUNK_OVERLAP,
            length_function=len,
            is_separator_regex=False,
        )

        texts = text_splitter.split_documents(documents)
        logger.info(f"‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(texts)} —á–∞–Ω–∫–æ–≤.")

        await self.add_documents(texts)

    async def add_documents(self, documents: list):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é ChromaDB.
        """
        if not self._store:
            raise RuntimeError(
                "ChromaVectorStore is not initialized. Call init() first."
            )
        if not self.embeddings:
            raise RuntimeError("Embeddings not initialized. Call init() first.")

        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ ChromaDB...")
        try:
            self._store.add_documents(documents)
            # Removed: self._store.persist() - no longer needed in ChromaDB 0.4.x and later
            logger.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ChromaDB.")
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ ChromaDB: {e}")
            raise

    def _get_documents_from_directory(self, directory_path: str):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        """
        documents = []
        for filename in os.listdir(directory_path):
            if filename.endswith(".json"):
                filepath = os.path.join(directory_path, filename)
                try:
                    with open(filepath, "r", encoding="utf-8") as f:
                        data = json.load(f)
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π JSON-—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
                        # —Å –ø–æ–ª—è–º–∏ 'page_content' –∏ 'metadata'
                        if "page_content" in data and "metadata" in data:
                            from langchain_core.documents import Document

                            documents.append(
                                Document(
                                    page_content=data["page_content"],
                                    metadata=data["metadata"],
                                )
                            )
                        else:
                            logger.warning(
                                f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'page_content' –∏–ª–∏ 'metadata'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
                            )
                except json.JSONDecodeError as e:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filename}: {e}"
                    )
                except Exception as e:
                    logger.error(
                        f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}"
                    )
        return documents

    def get_all_document_ids(self) -> set[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ ChromaDB.
        """
        if not self._store:
            raise RuntimeError("ChromaVectorStore is not initialized.")
        try:
            # ChromaDB —Ö—Ä–∞–Ω–∏—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ú—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ _collection.get()
            # —Å include=['metadatas'] –∏–ª–∏ include=['documents'] –∏ –∏–∑–≤–ª–µ—á—å ID.
            # –ë–æ–ª–µ–µ –ø—Ä—è–º–æ–π —Å–ø–æ—Å–æ–± - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ API —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç.
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–≤–ª–µ—á—å –∏—Ö ID.
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–∞–∫ —á–∞—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
            # –í Langchain Chroma, ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±—ã—á–Ω–æ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            # –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID, –º—ã –º–æ–∂–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–≤–ª–µ—á—å –∏—Ö ID.
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.
            # –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å _collection.get(ids=None, where=None, limit=None,
            # offset=None, include=[]) –∏ –∏–∑–≤–ª–µ—á—å 'ids'.

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Chroma
            # –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            all_ids = self._store._collection.get(
                ids=None, where=None, limit=None, offset=None, include=[]
            )["ids"]
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_ids)} ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ ChromaDB.")
            return set(all_ids)
        except Exception as e:
            logger.exception(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ ChromaDB: {e}"
            )
            raise

    def get_all_source_filenames(self) -> set[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ ChromaDB.
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è 'source_file' –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        """
        if not self._store:
            raise RuntimeError("ChromaVectorStore is not initialized.")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Chroma
            all_metadatas = self._store._collection.get(include=["metadatas"])[
                "metadatas"
            ]
            source_files = set()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            for metadata in all_metadatas:
                if metadata and "source_file" in metadata:
                    source_files.add(metadata["source_file"])

            logger.info(
                f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(source_files)} –∏–º–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ChromaDB."
            )
            return source_files
        except Exception as e:
            logger.exception(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ ChromaDB: {e}"
            )
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
chroma_vectorstore = ChromaVectorStore()


# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
def get_vectorstore() -> ChromaVectorStore:
    return chroma_vectorstore
